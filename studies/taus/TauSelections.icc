using namespace tas;

namespace SS 
{
    tauID(int idx, SS::IDLevel id_level, int year)
    {
        switch (year) 
        {
        case (2016):
            // TODO: add 2016 ID
            return SS::tau2017ID(idx, id_level);
        case (2017):
            return SS::tau2017ID(idx, id_level);
        case (2018):
            // TODO: add 2018 ID
            return SS::tau2017ID(idx, id_level);
        default:
            throw std::runtime_error("TauSelections.icc: ERROR - invalid year");
            return false;
            break;
        }
    }
    tau2017ID(int idx, SS::IDLevel id_level)
    {
        switch(id_level) 
        {
            case (SS::IDveto):
                return true;
                break;
            case (SS::IDfakable):
                // TODO: add fakable ID
                return true;
                break;
            case (SS::IDtight):
                if (!(Tau_idDeepTau2017v2p1VSe().at(idx) & 2)) { return false; }
                if (!(Tau_idDeepTau2017v2p1VSmu().at(idx) & 1)) { return false; }
                if (!(Tau_idDeepTau2017v2p1VSjet().at(idx) & 8)) { return false; }
            default:
                throw std::runtime_error("TauSelections.icc: ERROR - invalid ID level");
                return false;
                break;
        }
    }
}
