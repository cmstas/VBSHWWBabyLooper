// -*- C++ -*-
// This is a header file generated with the command:
// makeCMS3ClassFiles("/home/users/phchang/public_html/analysis/hwh/VBSHWWBabyLooper/hadds/createMini_Run2/vbshww_c2v_4p5.root", "variable", "VBS", "tas", "vbs")

#ifndef VBS_H
#define VBS_H

#include "Math/LorentzVector.h"
#include "Math/GenVector/PtEtaPhiM4D.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector> 
#include <unistd.h> 
typedef ROOT::Math::LorentzVector< ROOT::Math::PtEtaPhiM4D<float> > LorentzVector;

using namespace std; 
class VBS {
 private: 
 protected: 
  unsigned int index;
  int      run_;
  TBranch *run_branch;
  bool     run_isLoaded;
  int      lumi_;
  TBranch *lumi_branch;
  bool     lumi_isLoaded;
  unsigned long long evt_;
  TBranch *evt_branch;
  bool     evt_isLoaded;
  float    wgt_;
  TBranch *wgt_branch;
  bool     wgt_isLoaded;
  int      trig_ee_;
  TBranch *trig_ee_branch;
  bool     trig_ee_isLoaded;
  int      trig_em_;
  TBranch *trig_em_branch;
  bool     trig_em_isLoaded;
  int      trig_mm_;
  TBranch *trig_mm_branch;
  bool     trig_mm_isLoaded;
  int      trig_se_;
  TBranch *trig_se_branch;
  bool     trig_se_isLoaded;
  int      trig_sm_;
  TBranch *trig_sm_branch;
  bool     trig_sm_isLoaded;
  int      pass_duplicate_ee_em_mm_;
  TBranch *pass_duplicate_ee_em_mm_branch;
  bool     pass_duplicate_ee_em_mm_isLoaded;
  int      pass_duplicate_mm_em_ee_;
  TBranch *pass_duplicate_mm_em_ee_branch;
  bool     pass_duplicate_mm_em_ee_isLoaded;
  int      is_pd_ee_;
  TBranch *is_pd_ee_branch;
  bool     is_pd_ee_isLoaded;
  int      is_pd_em_;
  TBranch *is_pd_em_branch;
  bool     is_pd_em_isLoaded;
  int      is_pd_mm_;
  TBranch *is_pd_mm_branch;
  bool     is_pd_mm_isLoaded;
  int      is_pd_se_;
  TBranch *is_pd_se_branch;
  bool     is_pd_se_isLoaded;
  int      is_pd_sm_;
  TBranch *is_pd_sm_branch;
  bool     is_pd_sm_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *met_p4_;
  TBranch *met_p4_branch;
  bool     met_p4_isLoaded;
  int      isvbswwh_;
  TBranch *isvbswwh_branch;
  bool     isvbswwh_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *gen_jet0_;
  TBranch *gen_jet0_branch;
  bool     gen_jet0_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *gen_jet1_;
  TBranch *gen_jet1_branch;
  bool     gen_jet1_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *gen_w0_;
  TBranch *gen_w0_branch;
  bool     gen_w0_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *gen_w1_;
  TBranch *gen_w1_branch;
  bool     gen_w1_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *gen_h_;
  TBranch *gen_h_branch;
  bool     gen_h_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *gen_lep0_;
  TBranch *gen_lep0_branch;
  bool     gen_lep0_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *gen_lep1_;
  TBranch *gen_lep1_branch;
  bool     gen_lep1_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *gen_lep2_;
  TBranch *gen_lep2_branch;
  bool     gen_lep2_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *gen_nu0_;
  TBranch *gen_nu0_branch;
  bool     gen_nu0_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *gen_nu1_;
  TBranch *gen_nu1_branch;
  bool     gen_nu1_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *gen_b0_;
  TBranch *gen_b0_branch;
  bool     gen_b0_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *gen_b1_;
  TBranch *gen_b1_branch;
  bool     gen_b1_isLoaded;
  int      genchannel_;
  TBranch *genchannel_branch;
  bool     genchannel_isLoaded;
  float    lepsf_;
  TBranch *lepsf_branch;
  bool     lepsf_isLoaded;
  float    btagsf_;
  TBranch *btagsf_branch;
  bool     btagsf_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > > *good_leptons_p4_;
  TBranch *good_leptons_p4_branch;
  bool     good_leptons_p4_isLoaded;
  vector<int> *good_leptons_pdgid_;
  TBranch *good_leptons_pdgid_branch;
  bool     good_leptons_pdgid_isLoaded;
  vector<int> *good_leptons_tight_;
  TBranch *good_leptons_tight_branch;
  bool     good_leptons_tight_isLoaded;
  vector<int> *good_leptons_jetIdx_;
  TBranch *good_leptons_jetIdx_branch;
  bool     good_leptons_jetIdx_isLoaded;
  vector<int> *good_leptons_genPartFlav_;
  TBranch *good_leptons_genPartFlav_branch;
  bool     good_leptons_genPartFlav_isLoaded;
  vector<float> *good_leptons_pfRelIso03_all_;
  TBranch *good_leptons_pfRelIso03_all_branch;
  bool     good_leptons_pfRelIso03_all_isLoaded;
  vector<float> *good_leptons_pfRelIso03_chg_;
  TBranch *good_leptons_pfRelIso03_chg_branch;
  bool     good_leptons_pfRelIso03_chg_isLoaded;
  vector<float> *good_leptons_jetPtRelv2_;
  TBranch *good_leptons_jetPtRelv2_branch;
  bool     good_leptons_jetPtRelv2_isLoaded;
  vector<float> *good_leptons_jetRelIso_;
  TBranch *good_leptons_jetRelIso_branch;
  bool     good_leptons_jetRelIso_isLoaded;
  vector<float> *good_leptons_miniPFRelIso_all_;
  TBranch *good_leptons_miniPFRelIso_all_branch;
  bool     good_leptons_miniPFRelIso_all_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > > *good_taus_p4_;
  TBranch *good_taus_p4_branch;
  bool     good_taus_p4_isLoaded;
  vector<int> *good_taus_pdgid_;
  TBranch *good_taus_pdgid_branch;
  bool     good_taus_pdgid_isLoaded;
  vector<int> *good_taus_tight_;
  TBranch *good_taus_tight_branch;
  bool     good_taus_tight_isLoaded;
  vector<int> *good_taus_jetIdx_;
  TBranch *good_taus_jetIdx_branch;
  bool     good_taus_jetIdx_isLoaded;
  vector<int> *good_taus_genPartFlav_;
  TBranch *good_taus_genPartFlav_branch;
  bool     good_taus_genPartFlav_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > > *good_jets_p4_;
  TBranch *good_jets_p4_branch;
  bool     good_jets_p4_isLoaded;
  vector<int> *good_jets_loose_btagged_;
  TBranch *good_jets_loose_btagged_branch;
  bool     good_jets_loose_btagged_isLoaded;
  vector<int> *good_jets_medium_btagged_;
  TBranch *good_jets_medium_btagged_branch;
  bool     good_jets_medium_btagged_isLoaded;
  vector<int> *good_jets_tight_btagged_;
  TBranch *good_jets_tight_btagged_branch;
  bool     good_jets_tight_btagged_isLoaded;
  vector<float> *good_jets_btag_score_;
  TBranch *good_jets_btag_score_branch;
  bool     good_jets_btag_score_isLoaded;
  vector<float> *good_jets_qg_disc_;
  TBranch *good_jets_qg_disc_branch;
  bool     good_jets_qg_disc_isLoaded;
  vector<int> *good_jets_flavor_;
  TBranch *good_jets_flavor_branch;
  bool     good_jets_flavor_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > > *good_fatjets_p4_;
  TBranch *good_fatjets_p4_branch;
  bool     good_fatjets_p4_isLoaded;
  vector<int> *good_fatjets_loose_;
  TBranch *good_fatjets_loose_branch;
  bool     good_fatjets_loose_isLoaded;
  vector<int> *good_fatjets_medium_;
  TBranch *good_fatjets_medium_branch;
  bool     good_fatjets_medium_isLoaded;
  vector<int> *good_fatjets_tight_;
  TBranch *good_fatjets_tight_branch;
  bool     good_fatjets_tight_isLoaded;
  vector<float> *good_fatjets_msd_;
  TBranch *good_fatjets_msd_branch;
  bool     good_fatjets_msd_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > > *higgs_jets_p4_;
  TBranch *higgs_jets_p4_branch;
  bool     higgs_jets_p4_isLoaded;
  vector<int> *higgs_jets_loose_btagged_;
  TBranch *higgs_jets_loose_btagged_branch;
  bool     higgs_jets_loose_btagged_isLoaded;
  vector<int> *higgs_jets_medium_btagged_;
  TBranch *higgs_jets_medium_btagged_branch;
  bool     higgs_jets_medium_btagged_isLoaded;
  vector<int> *higgs_jets_tight_btagged_;
  TBranch *higgs_jets_tight_btagged_branch;
  bool     higgs_jets_tight_btagged_isLoaded;
  vector<float> *higgs_jets_btag_score_;
  TBranch *higgs_jets_btag_score_branch;
  bool     higgs_jets_btag_score_isLoaded;
  vector<int> *higgs_jets_flavor_;
  TBranch *higgs_jets_flavor_branch;
  bool     higgs_jets_flavor_isLoaded;
  vector<int> *higgs_jets_good_jets_idx_;
  TBranch *higgs_jets_good_jets_idx_branch;
  bool     higgs_jets_good_jets_idx_isLoaded;
  vector<int> *higgs_jets_genmatched_;
  TBranch *higgs_jets_genmatched_branch;
  bool     higgs_jets_genmatched_isLoaded;
  vector<float> *higgs_jets_genmatched_dr_;
  TBranch *higgs_jets_genmatched_dr_branch;
  bool     higgs_jets_genmatched_dr_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > > *vbs_jets_p4_;
  TBranch *vbs_jets_p4_branch;
  bool     vbs_jets_p4_isLoaded;
  vector<int> *vbs_jets_good_jets_idx_;
  TBranch *vbs_jets_good_jets_idx_branch;
  bool     vbs_jets_good_jets_idx_isLoaded;
  int      nbloose_;
  TBranch *nbloose_branch;
  bool     nbloose_isLoaded;
  int      nbmedium_;
  TBranch *nbmedium_branch;
  bool     nbmedium_isLoaded;
  int      nbtight_;
  TBranch *nbtight_branch;
  bool     nbtight_isLoaded;
  int      ncenjet30_;
  TBranch *ncenjet30_branch;
  bool     ncenjet30_isLoaded;
  int      njet30_;
  TBranch *njet30_branch;
  bool     njet30_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *lep0_;
  TBranch *lep0_branch;
  bool     lep0_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *lep1_;
  TBranch *lep1_branch;
  bool     lep1_isLoaded;
  int      lep0ID_;
  TBranch *lep0ID_branch;
  bool     lep0ID_isLoaded;
  int      lep1ID_;
  TBranch *lep1ID_branch;
  bool     lep1ID_isLoaded;
  int      lep0GenPartFlav_;
  TBranch *lep0GenPartFlav_branch;
  bool     lep0GenPartFlav_isLoaded;
  int      lep1GenPartFlav_;
  TBranch *lep1GenPartFlav_branch;
  bool     lep1GenPartFlav_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *leadlep_;
  TBranch *leadlep_branch;
  bool     leadlep_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *subllep_;
  TBranch *subllep_branch;
  bool     subllep_isLoaded;
  int      leadlepID_;
  TBranch *leadlepID_branch;
  bool     leadlepID_isLoaded;
  int      subllepID_;
  TBranch *subllepID_branch;
  bool     subllepID_isLoaded;
  int      leadlepGenPartFlav_;
  TBranch *leadlepGenPartFlav_branch;
  bool     leadlepGenPartFlav_isLoaded;
  int      subllepGenPartFlav_;
  TBranch *subllepGenPartFlav_branch;
  bool     subllepGenPartFlav_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *b0_;
  TBranch *b0_branch;
  bool     b0_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *b1_;
  TBranch *b1_branch;
  bool     b1_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *j0_;
  TBranch *j0_branch;
  bool     j0_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > *j1_;
  TBranch *j1_branch;
  bool     j1_isLoaded;
  int      channel_;
  TBranch *channel_branch;
  bool     channel_isLoaded;
  int      channeldetail_;
  TBranch *channeldetail_branch;
  bool     channeldetail_isLoaded;
  int      lepchannel_;
  TBranch *lepchannel_branch;
  bool     lepchannel_isLoaded;
  int      btagchannel_;
  TBranch *btagchannel_branch;
  bool     btagchannel_isLoaded;
  int      bmatchcateg_;
  TBranch *bmatchcateg_branch;
  bool     bmatchcateg_isLoaded;
  int      mee_noZ_;
  TBranch *mee_noZ_branch;
  bool     mee_noZ_isLoaded;
  int      mbbIn_;
  TBranch *mbbIn_branch;
  bool     mbbIn_isLoaded;
  int      pass_blind_;
  TBranch *pass_blind_branch;
  bool     pass_blind_isLoaded;
public: 
void Init(TTree *tree);
void GetEntry(unsigned int idx); 
void LoadAllBranches(); 
  const int &run();
  const int &lumi();
  const unsigned long long &evt();
  const float &wgt();
  const int &trig_ee();
  const int &trig_em();
  const int &trig_mm();
  const int &trig_se();
  const int &trig_sm();
  const int &pass_duplicate_ee_em_mm();
  const int &pass_duplicate_mm_em_ee();
  const int &is_pd_ee();
  const int &is_pd_em();
  const int &is_pd_mm();
  const int &is_pd_se();
  const int &is_pd_sm();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &met_p4();
  const int &isvbswwh();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &gen_jet0();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &gen_jet1();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &gen_w0();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &gen_w1();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &gen_h();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &gen_lep0();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &gen_lep1();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &gen_lep2();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &gen_nu0();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &gen_nu1();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &gen_b0();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &gen_b1();
  const int &genchannel();
  const float &lepsf();
  const float &btagsf();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > > &good_leptons_p4();
  const vector<int> &good_leptons_pdgid();
  const vector<int> &good_leptons_tight();
  const vector<int> &good_leptons_jetIdx();
  const vector<int> &good_leptons_genPartFlav();
  const vector<float> &good_leptons_pfRelIso03_all();
  const vector<float> &good_leptons_pfRelIso03_chg();
  const vector<float> &good_leptons_jetPtRelv2();
  const vector<float> &good_leptons_jetRelIso();
  const vector<float> &good_leptons_miniPFRelIso_all();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > > &good_taus_p4();
  const vector<int> &good_taus_pdgid();
  const vector<int> &good_taus_tight();
  const vector<int> &good_taus_jetIdx();
  const vector<int> &good_taus_genPartFlav();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > > &good_jets_p4();
  const vector<int> &good_jets_loose_btagged();
  const vector<int> &good_jets_medium_btagged();
  const vector<int> &good_jets_tight_btagged();
  const vector<float> &good_jets_btag_score();
  const vector<float> &good_jets_qg_disc();
  const vector<int> &good_jets_flavor();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > > &good_fatjets_p4();
  const vector<int> &good_fatjets_loose();
  const vector<int> &good_fatjets_medium();
  const vector<int> &good_fatjets_tight();
  const vector<float> &good_fatjets_msd();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > > &higgs_jets_p4();
  const vector<int> &higgs_jets_loose_btagged();
  const vector<int> &higgs_jets_medium_btagged();
  const vector<int> &higgs_jets_tight_btagged();
  const vector<float> &higgs_jets_btag_score();
  const vector<int> &higgs_jets_flavor();
  const vector<int> &higgs_jets_good_jets_idx();
  const vector<int> &higgs_jets_genmatched();
  const vector<float> &higgs_jets_genmatched_dr();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > > &vbs_jets_p4();
  const vector<int> &vbs_jets_good_jets_idx();
  const int &nbloose();
  const int &nbmedium();
  const int &nbtight();
  const int &ncenjet30();
  const int &njet30();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &lep0();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &lep1();
  const int &lep0ID();
  const int &lep1ID();
  const int &lep0GenPartFlav();
  const int &lep1GenPartFlav();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &leadlep();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &subllep();
  const int &leadlepID();
  const int &subllepID();
  const int &leadlepGenPartFlav();
  const int &subllepGenPartFlav();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &b0();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &b1();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &j0();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &j1();
  const int &channel();
  const int &channeldetail();
  const int &lepchannel();
  const int &btagchannel();
  const int &bmatchcateg();
  const int &mee_noZ();
  const int &mbbIn();
  const int &pass_blind();

  static void progress(int nEventsTotal, int nEventsChain);
};

#ifndef __CINT__
extern VBS vbs;
#endif

namespace tas {
  const int &run();
  const int &lumi();
  const unsigned long long &evt();
  const float &wgt();
  const int &trig_ee();
  const int &trig_em();
  const int &trig_mm();
  const int &trig_se();
  const int &trig_sm();
  const int &pass_duplicate_ee_em_mm();
  const int &pass_duplicate_mm_em_ee();
  const int &is_pd_ee();
  const int &is_pd_em();
  const int &is_pd_mm();
  const int &is_pd_se();
  const int &is_pd_sm();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &met_p4();
  const int &isvbswwh();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &gen_jet0();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &gen_jet1();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &gen_w0();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &gen_w1();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &gen_h();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &gen_lep0();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &gen_lep1();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &gen_lep2();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &gen_nu0();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &gen_nu1();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &gen_b0();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &gen_b1();
  const int &genchannel();
  const float &lepsf();
  const float &btagsf();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > > &good_leptons_p4();
  const vector<int> &good_leptons_pdgid();
  const vector<int> &good_leptons_tight();
  const vector<int> &good_leptons_jetIdx();
  const vector<int> &good_leptons_genPartFlav();
  const vector<float> &good_leptons_pfRelIso03_all();
  const vector<float> &good_leptons_pfRelIso03_chg();
  const vector<float> &good_leptons_jetPtRelv2();
  const vector<float> &good_leptons_jetRelIso();
  const vector<float> &good_leptons_miniPFRelIso_all();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > > &good_taus_p4();
  const vector<int> &good_taus_pdgid();
  const vector<int> &good_taus_tight();
  const vector<int> &good_taus_jetIdx();
  const vector<int> &good_taus_genPartFlav();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > > &good_jets_p4();
  const vector<int> &good_jets_loose_btagged();
  const vector<int> &good_jets_medium_btagged();
  const vector<int> &good_jets_tight_btagged();
  const vector<float> &good_jets_btag_score();
  const vector<float> &good_jets_qg_disc();
  const vector<int> &good_jets_flavor();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > > &good_fatjets_p4();
  const vector<int> &good_fatjets_loose();
  const vector<int> &good_fatjets_medium();
  const vector<int> &good_fatjets_tight();
  const vector<float> &good_fatjets_msd();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > > &higgs_jets_p4();
  const vector<int> &higgs_jets_loose_btagged();
  const vector<int> &higgs_jets_medium_btagged();
  const vector<int> &higgs_jets_tight_btagged();
  const vector<float> &higgs_jets_btag_score();
  const vector<int> &higgs_jets_flavor();
  const vector<int> &higgs_jets_good_jets_idx();
  const vector<int> &higgs_jets_genmatched();
  const vector<float> &higgs_jets_genmatched_dr();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > > &vbs_jets_p4();
  const vector<int> &vbs_jets_good_jets_idx();
  const int &nbloose();
  const int &nbmedium();
  const int &nbtight();
  const int &ncenjet30();
  const int &njet30();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &lep0();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &lep1();
  const int &lep0ID();
  const int &lep1ID();
  const int &lep0GenPartFlav();
  const int &lep1GenPartFlav();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &leadlep();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &subllep();
  const int &leadlepID();
  const int &subllepID();
  const int &leadlepGenPartFlav();
  const int &subllepGenPartFlav();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &b0();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &b1();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &j0();
  const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> > &j1();
  const int &channel();
  const int &channeldetail();
  const int &lepchannel();
  const int &btagchannel();
  const int &bmatchcateg();
  const int &mee_noZ();
  const int &mbbIn();
  const int &pass_blind();
}
#include "rooutil.h"
#endif
